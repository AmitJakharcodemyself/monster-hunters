{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","type","placeholder","onChange","handleChange","App","e","setState","searchField","target","value","state","fetch","then","data","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qUAGaA,EAAK,SAACC,GAAD,OACV,sBAAKC,UAAU,iBAAf,UACA,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAClB,mCAAML,EAAMI,QAAQE,QACpB,4BAAIN,EAAMI,QAAQG,YCFjBC,EAAS,SAACR,GAAD,OAClB,aAD4B,CAC5B,OAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCLlBM,G,MAAU,SAACX,GAAD,OACnB,8BACA,uBACAC,UAAU,SACRW,KAAK,OACLC,YAAab,EAAMa,YACnBC,SAAUd,EAAMe,mBCsCPC,E,kDAzCb,aAAc,IAAD,8BACb,gBAcFD,aAAa,SAACE,GACV,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAdtC,EAAKC,MAAM,CACTb,SAAS,GAGTU,YAAY,IAND,E,qDASf,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAI,OAAGA,EAAKC,UACjBF,MAAK,SAAAG,GAAK,OAAG,EAAKT,SAAS,CAACT,SAASkB,S,oBAOtC,WACE,MAA6BC,KAAKN,MAA3Bb,EAAP,EAAOA,SAASU,EAAhB,EAAgBA,YACVU,EAAiBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC5CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAGlD,OACE,sBAAK9B,UAAU,MAAf,UACA,iDACA,cAAC,EAAD,CAAWY,YAAY,iBACvBE,aAAca,KAAKb,eAInB,cAAC,EAAD,CAAUN,SAAUoB,W,GAlCRI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.99cc71c9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.css';\r\n\r\nexport const Card=(props)=>(\r\n        <div className='card-container'>\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n            <h2> {props.monster.name}</h2>\r\n            <p>{props.monster.email}</p>\r\n        </div>\r\n\r\n)","import React from 'react';\r\nimport './card-list.style.css';\r\nimport {Card} from '../card/card.component';\r\n\r\n\r\nexport const CardList=(props)=>(//naming of components In capital\r\n    <div className=\"card-list\">\r\n        {props.monsters.map(monster=>(\r\n            <Card key={monster.id} monster={monster} ></Card>\r\n        ))}\r\n    </div>\r\n)\r\n","import React from 'react';\r\nimport './search-box.style.css';\r\n\r\nexport const SearchBox=(props)=>(\r\n    <div >\r\n    <input \r\n    className='search'\r\n      type='text'\r\n      placeholder={props.placeholder}\r\n      onChange={props.handleChange}\r\n       />\r\n       </div>\r\n)","import React,{Component} from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component.jsx';\nimport { SearchBox } from './components/search-box/search-box.component.jsx';\n\nclass App extends Component{\n  constructor(){\n  super();\n  this.state={\n    monsters:[\n    \n    ],\n    searchField:''\n  };\n}\ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(data=> data.json())\n  .then(users=> this.setState({monsters:users}));//Don'tmutate state directly Use setState()\n}\n\nhandleChange=(e)=>{\n    this.setState({searchField:e.target.value});\n}\n\n  render(){//whenever state is changed render() is called again;\n    const {monsters,searchField}=this.state;\n    const filteredMonsters=monsters.filter(monster=> \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n\n    return (\n      <div className=\"App\">\n      <h1>Monster Hunters</h1>\n      <SearchBox placeholder='Search Monster'\n      handleChange={this.handleChange}//Casing is Important\n      >\n\n      </SearchBox>\n      <CardList monsters={filteredMonsters}>\n      \n      </CardList>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}